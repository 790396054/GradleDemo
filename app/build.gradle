apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

// 应用我们的路由插件
apply plugin: 'com.imooc.router'

// 3. 使用 Extension
router {
    wikiDir getRootDir().absolutePath
}

android {
    compileSdkVersion COMPILE_SDK_VERSION

    defaultConfig {
        applicationId "com.didi.gradledemo"
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        resConfigs "zh-rCN"
    }

    signingConfigs {
        release {
            storeFile file("./sign.keystore")
            storePassword "123456"
            keyAlias "gmm"
            keyPassword "123456"
        }
    }

    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 会编译生成 BuildConfig 中的一个变量。生成路径是 app/build/generated/source/buildConfig/debug/com/didi/gradledemo/BuildConfig.java
            buildConfigField("String", "buildTime", "\"${System.currentTimeMillis()}\"")
            // 会编译生成资源路径的一个变量，生成路径是 app/build/generated/res/resValues/debug/values/gradleResValues.xml
            resValue("string", "greeting", "我是debug编译器的字符串")
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 会编译生成 BuildConfig 中的一个变量。生成路径是 app/build/generated/source/buildConfig/debug/com/didi/gradledemo/BuildConfig.java
            buildConfigField("String", "buildTime", "\"${System.currentTimeMillis()}\"")
            // 会编译生成资源路径的一个变量，生成路径是 app/build/generated/res/resValues/debug/values/gradleResValues.xml
            resValue("string", "greeting", "我是release编译器的字符串")
        }
    }


    // 多渠道包构建配置
    flavorDimensions "channel"
    productFlavors{
        baidu {
            manifestPlaceholders = [
                    MTA_CHANNEL_VALUE: "baidu"
            ]
        }

        xiaomi {
            manifestPlaceholders = [
                    MTA_CHANNEL_VALUE: "xiaomi"
            ]
        }

        wandoujia {
            manifestPlaceholders = [
                    MTA_CHANNEL_VALUE: "wandoujia"
            ]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // 由 plugin 插件自动实现参数的注入。
//    kapt {
//        arguments {
//            arg("root_project_dir", rootProject.projectDir.absolutePath)
//        }
//    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    // 重命名 apk 名称
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "release") {
                outputFileName = "app_${variant.productFlavors[0].name}_${defaultConfig.versionName}.apk"
            }
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.3.72"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.72"

    implementation "androidx.core:core-ktx:$ANDROIDX_CORE_KTX"
    implementation "androidx.appcompat:appcompat:$ANDROIDX_COMPAT"
    implementation "com.google.android.material:material:$ANDROIDX_MATERIAL"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation project(':router-annotations')
    kapt project(':router-processor')

    implementation project(':mylibrary')
//    implementation 'com.imooc.router:router-annotations:1.0.0'
//    kapt 'com.imooc.router:router-processor:1.0.0'

}

//apply from : 'read_local_prop.gradle'
// 另一种写法
apply from : project.file('read_local_prop.gradle')


configurations.all {
    resolutionStrategy.eachDependency{details->
        String dependency = details.requested.toString()
//        if (dependency.contains("com.google.android.material:material")) {
//            throw new RuntimeException("不允许使用 ${dependency}")
//        }
    }
}